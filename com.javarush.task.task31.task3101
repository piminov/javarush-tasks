package com.javarush.task.task31.task3101;

import java.io.*;
import java.util.Map;
import java.util.TreeMap;

/* 
Проход по дереву файлов

1. На вход метода main() подаются два параметра.
Первый - path - путь к директории, второй - resultFileAbsolutePath - имя (полный путь) существующего файла, который будет содержать результат.
2. Переименовать resultFileAbsolutePath в allFilesContent.txt (используй метод FileUtils.renameFile(), и, если понадобится, FileUtils.isExist()).
3. Для каждого файла в директории path и в ее всех вложенных поддиректориях выполнить следующее:
Если у файла длина в байтах НЕ больше 50, то для всех таких файлов:
3.1. Отсортировать их по имени файла в возрастающем порядке, путь не учитывать при сортировке.
3.2. В allFilesContent.txt последовательно записать содержимое всех файлов из п. 3.1. После каждого тела файла записать "\n".
Все файлы имеют расширение txt.
В качестве разделителя пути используй "/".
Для создания файлов используй конструктор File(String pathname).


Требования:
1. Файл, который приходит вторым параметром в main, должен быть переименован в allFilesContent.txt.
2. Нужно создать поток для записи в переименованный файл.
3. Содержимое всех файлов, размер которых не превышает 50 байт, должно быть записано в файл allFilesContent.txt в отсортированном по имени файла порядке.
4. Поток для записи в файл нужно закрыть.
5. Не используй статические переменные.
*/

public class Solution {
    public static void main(String[] args) {
        Map<String, File> fileList = new TreeMap<>();
        String path = args[0];
        String resultFileAbsolutePath = args[1];
        File dir = new File(path);
        File result = new File(resultFileAbsolutePath);
        File newResult = new File(result.getParent() + "/allFilesContent.txt");
        if (FileUtils.isExist(result)) FileUtils.renameFile(result, newResult);

        pickSmallFiles(dir, fileList);
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(newResult));
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (Map.Entry<String, File> item : fileList.entrySet()) {
            try {
                reader = new BufferedReader(new FileReader(item.getValue()));
                while (true) {
                    if (!reader.ready()) break;
                    writer.write(reader.readLine());
                }
                writer.write("\n");
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (writer != null) {
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void pickSmallFiles(File dir, Map<String, File> fileList) {
        for (File file : dir.listFiles()) {
            if (file.isDirectory()) pickSmallFiles(file, fileList);
            if (file.isFile() && file.length() <= 50 && file.length() > 0) {
                fileList.put(file.getName(), file);
            }
        }
    }
}
